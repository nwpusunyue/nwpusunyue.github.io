{"meta":{"title":"YueYue","subtitle":"孙悦的博客","description":"孙悦的博客|YueSun","author":"SunYue(孙悦)","url":"http://nwpusunyue.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-01-10T14:19:26.401Z","updated":"2018-01-10T14:19:26.401Z","comments":false,"path":"/404.html","permalink":"http://nwpusunyue.github.io//404.html","excerpt":"","text":""},{"title":"关于","date":"2018-01-10T14:22:00.382Z","updated":"2018-01-10T14:22:00.382Z","comments":false,"path":"about/index.html","permalink":"http://nwpusunyue.github.io/about/index.html","excerpt":"","text":"右边这些内容是模板上的，后期后逐渐丰富自己的项目经历，来完善自己的简介的，谢谢大家关注支持。"},{"title":"书单","date":"2018-01-08T08:19:10.854Z","updated":"2018-01-08T08:19:10.854Z","comments":false,"path":"books/index.html","permalink":"http://nwpusunyue.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-01-08T08:19:10.855Z","updated":"2018-01-08T08:19:10.855Z","comments":false,"path":"categories/index.html","permalink":"http://nwpusunyue.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-01-08T08:19:10.855Z","updated":"2018-01-08T08:19:10.855Z","comments":true,"path":"links/index.html","permalink":"http://nwpusunyue.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-01-08T08:19:10.856Z","updated":"2018-01-08T08:19:10.856Z","comments":false,"path":"repository/index.html","permalink":"http://nwpusunyue.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-01-08T08:19:10.858Z","updated":"2018-01-08T08:19:10.858Z","comments":false,"path":"tags/index.html","permalink":"http://nwpusunyue.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"约翰福音_1:1-18","slug":"约翰福音-1-1-18","date":"2018-01-14T08:46:40.000Z","updated":"2018-01-14T13:41:39.307Z","comments":true,"path":"2018/01/14/约翰福音-1-1-18/","link":"","permalink":"http://nwpusunyue.github.io/2018/01/14/约翰福音-1-1-18/","excerpt":"","text":"坚持读经——Day 1 经文 1234567891011121314151617181太初有道，道与 神同在，道就是 神。2这道太初与 神同在。3万物是藉着他造的；凡被造的，没有一样不是藉着他造的。4生命在他里头，这生命就是人的光。5光照在黑暗里，黑暗却不接受光。6有一个人，是从 神那里差来的，名叫约翰。7这人来，为要作见证，就是为光作见证，叫众人因他可以信。8他不是那光，乃是要为光作见证。9那光是真光，照亮一切生在世上的人。10他在世界，世界也是藉着他造的，世界却不认识他。11他到自己的地方来，自己的人倒不接待他。12凡接待他的，就是信他名的人，他就赐他们权柄，作 神的儿女。13这等人不是从血气生的，不是从情欲生的，也不是从人意生的，乃是从 神生的。14道成了肉身，住在我们中间，充充满满地有恩典，有真理。我们也见过他的荣光，正是父独生子的荣光。15约翰为他作见证，喊着说：“这就是我曾说，‘那在我以后来的，反成了在我以前的，因他本来在我以前。’”16从他丰满的恩典里，我们都领受了，而且恩上加恩。17律法本是藉着摩西传的，恩典和真理都是由耶稣基督来的。18从来没有人看见 神，只有在父怀里的独生子将他表明出来。 大致划分一下层次： 1-4：道就是神，创造万物，生命也在他里头，黑暗不能接受光。 5-8 、15： 从神那来的一个人——约翰为光做见证。 9-14：道成肉身来到地上，光照在世界。世界的人却不认识他、不接待他；然而，从神生的人，愿意接待他，就作了神的儿女。 14、16-17：道有充充满满地恩典和真理，丰满的恩典和真理出于耶稣基督。 14、18：没有人见过神，道成了肉身住在我们中间，是天父的独生子，将神表明出来。 思想 约翰福音真的写的好抽象，就字面意思上，只在17节出现了一次『耶稣基督』，其他的都是【道】【光】的说明，但可以发现都是指的一位，那就是天父的独生子——耶稣基督。 有人问我：人是神造的，那神是从哪来的？我竟无言以对。但圣经告诉我说：太初有道，道与神同在，道就是神。虽然还是很难理解，但是要相信，神就是太初就有的，(&quot;太初&quot;是指在尚未有时间和空间之前的永恒中)，神是自有永有的神。 跳着来看，4、12、13、16、17节，生命在他里头，恩典和真理也都是由他来的，这生命应该是另外的不属世界的生命，不是从血气、情欲、人意生的，是从神生的，并且从神生的这些人在世界都不认识、不接受光(耶稣)的时候，他们却认识，愿意接待，可以称作神的儿女。** 所以，认识这位道成肉身的神，可以获得从神生的生命，可以作神的儿女，这本身就是莫大的恩典，更不用提生活的保守和眷顾了。 除了光、道、耶稣以外，还有两个人物，一个是约翰(查考圣经路加福音1:13：这个约翰不是写约翰福音的约翰，而是祭司撒迦利亚和他妻子伊丽莎白的儿子约翰)，另一个是摩西。 先说约翰，约翰的出生伴随有天使的预言并且有重要的使命——&quot;为要作见证，就是为光作见证，叫众人因他可以信。&quot;哇，约翰的出生还有天使作见证和预言(路加福音1:11)，可是！圣经很明确的说：他不是那光，乃是为光做见证。后来，约翰也确实为光做了见证，喊着对以色列的百姓见证耶稣(路加福音1:15-16）。其实，光？耶稣也说我们是世上的光，要作光作盐。我们也要像约翰能努力为耶稣的名作美好的见证。 摩西，是带领以色列出埃及走旷野进迦南美地的领袖。他从神那里领受了律法，颁给以色列百姓。耶稣给人带来的是恩典和真理。 从来都没有人看见神，但是耶稣来了，将神表明出来。我虽然没有和耶稣生在相同的时代，也没有见过耶稣，但借助圣经、信心和圣灵的帮助，我就相信耶稣是实实在在的，并且将神不折不扣地表明出来。 应用 圣经上的章节字句有些难懂，但是耶稣的恩典和信实却是显然的。能认识神，就是一份恩典，像经文所说，我们都领受了，而且恩上加恩。 要努力为主耶稣做见证。","categories":[{"name":"灵修笔记","slug":"灵修笔记","permalink":"http://nwpusunyue.github.io/categories/灵修笔记/"}],"tags":[{"name":"读经","slug":"读经","permalink":"http://nwpusunyue.github.io/tags/读经/"}]},{"title":"大数据分析方法:用分析驱动商业价值-1","slug":"大数据分析方法-用分析驱动商业价值-1","date":"2018-01-12T14:06:38.000Z","updated":"2018-01-13T17:16:40.641Z","comments":true,"path":"2018/01/12/大数据分析方法-用分析驱动商业价值-1/","link":"","permalink":"http://nwpusunyue.github.io/2018/01/12/大数据分析方法-用分析驱动商业价值-1/","excerpt":"","text":"序言 一周之前，我本来就是想培养自己阅读的习惯，顺便整理一些有用的电子版资料。在这样的想法之下，我决定搭建一个个人博客，没想到一弄就是三四天(Jekyll 模板是真的难以配置，尤其是在Windows下安装RubyGem工具及相关工具包，配置文件也看的不明不白，最后选用基于Node.js的Hexo模板，上手方便，一天就搭建好了)。废话不多说，开始积累我的阅读体验~~ 第1章 现代分析基本原则 文章摘抄 现在是数字媒体时代，也是web2.0、移动、云和大数据的时代。数据的容量、速率和多样性都呈爆发式增长。各大企业已经放弃使用单一数据仓库的理念，因为数据复杂的多样性已经让单一数据库很难驾驭。 本书提出了一个基于9项核心原则的办法： 实现商业价值和影响——构建并持续改进分析方法以实现高价值业务影响力。 专注于最后一英里——将分析部署到生产中，从而实现可复制的、持续的商业价值。 持续改善——从小处开始从而走向成功。 加速学习能力和执行力——行动、学习、适应、重复。 差异化分析——探索你的分析方法从而产生新的结果。 嵌入分析——将分析嵌入业务流程。 建立现代分析架构——利用通用硬件和下一代技术降低成本。 构建人力因素——培养并充分发挥人才潜力。 利用消费化趋势——利用不同的选择进行创新。 实现商业价值和影响 现代分析方法的原则之一就是聚焦分析那些具有潜在的改变组织游戏规则的价值的项目。 一些指标可以很容易识别和衡量，而其他指标在识别和衡量上有一定难度。为了发现这些潜在的指标，需要确定商业决策通常是由哪些因素决定的。首先要衡量这些因素的影响，然后有目的地建立对业务有直接影响的指标。 (如成熟的分析型组织通常会建立起兼顾资产负债两头的衡量标准——实现收益增长的同时必须有效控制成本。) 精明的企业可以通过 逆向思维 找到潜在的分析机遇，并且现实是往往那些在过去看来不可能解决的问题的壁垒早已不复存在。分析驱动的组织敢于打破条条框框，摆脱瓶颈，创造出大量的商业价值。通过 头脑风暴 寻求答案和新资源(数据，共生关系的合作者或技术)，不再使用样本和回溯测试来解决问题。 业务指标在“沙箱”分析模型(原始数据的一个有限子集、人工的、非生产的环境)下可能很好，但却在实际生产环境中表现得不尽如人意。所以，上线前，应该模拟实际的生产环境部署模型进行全面测试，对分析模型进行评估，而不是在理想的环境中评估。 专注最后一英里 终极目标：实现将分析部署到生产环境与承诺的为组织改变游戏规则的商业价值。清楚地认识到取得成功的代价，而不是如何取得成功。有了这样的认识后，为你的分析方法建立起量化的、远大的目标。 迅速完善并改进概念性验证(POC)或原型，使其可以进行生产部署，取得系统性的收益。 持续改善 持续改善的核心是：【1】从小处入手；【2】去除过于复杂的工作；【3】进行实验以确定和消除无用之处。重点在于快速实现价值而不在于完美。 现代分析团队要去除象牙塔的学术束缚，消除项目中不必要的耗时步骤，立即构建、部署模型，短周期、高效率，常用混合型敏捷开发或快速应用开发。 加速学习能力和执行力 通过新的和组合的方法、工具、可视化以及算法来揭示不断增长的数据中的模式。通过尝试新的事物，将一个产业和问题的经验运用到完全不同的另一个产业和问题中去。组织尽可能建立近乎实时学习的能力是一个越来越强的发展趋势。 差异化分析 企业力求将推向市场的产品、客户服务和运营过程组合起来创造差异化竞争。许多企业在市场上观察并尝试学习其他企业的竞争格局，这种做法意味着处于市场的次要位置，相反，分析领导型企业观察其他行业，并思考他们如何使用分析方法。他们借鉴其他行业的问题，并将其所处行业的问题进行类别，发现其他公司是如何使用分析来解决他们的问题的。 嵌入分析 按需分析或专案分析虽能帮助人们决策并采取行动，但由于人工交互速度缓慢，把分析模型内置于市场运转的流程当中，实现可重复性和可扩展性，能带来不可估量的商业价值。 建立现代分析架构 分析架构经历从独立的桌面到企业级数据仓库再到大数据平台的一个实质性演变，转变方向为：全面建设精简分析架构。 基于简单性和开放标准，充分利用便宜的硬件和开源软件，降低架构成本，提供平台的可扩展性，并利用最新的创新。优势：降低了复杂的管理和维护成本，同时为分析和从数据中发掘洞察创造了效率。 构建人力因素 成熟的分析型组织中，少数跨学科的数据科学家同时扮演着高层领导。 企业中，分析角色重视新知识，这是保持稀缺资源的关键。 利用消费化趋势 消费化常见的形式：应用商店(APP Store) 、 众包(Crowd-sourcing) 、 BYO(Bring Your Own) 具有分析应用程序的B2B应用商店和市场不断涌现，如信用评估模型等受众窄、分散的案例，多渠道营销模型等端到端案例…… 众包是一种外包，通过这种方式企业可以征集来自在线社区的建设性意见，以执行特定任务。 BYO自助服务时代，出现了自备数据(BYOD)、自备工具(BYOT)、自备模型(BYOM)的自助方式。 1234******************Tips******************BYOD 带上自己的数据 一种可以让组织结合自己的非竞争性数据来发现规律并从新的丰富数据源中发现深刻见解的方式。BYOT 带上自己的工具 一种混合搭配开放源代码和专用技术工具的方式，以处理具体的服务水平协议的要求。BYOM 带上自己的模型 一种利用应用商店和众包导出价值的方式 总结及感想 企业需要利用现代分析方法构建一个独特的分析路线图来推动商业战略，实现从信息时代向下一个新时代的转变，顿悟把握敏捷性才能使业务升级成为实现繁荣的关键因素。 企业发展，要创新，并且要讲求效率，只有高效迭代，敏捷开发，才能打破瓶颈，实现突破。这个过程需要自上而下地重塑组织结构和分析方法，且要勇于尝试不惧冒险！","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://nwpusunyue.github.io/categories/读书笔记/"}],"tags":[{"name":"大数据分析","slug":"大数据分析","permalink":"http://nwpusunyue.github.io/tags/大数据分析/"}]},{"title":"新年蒙福","slug":"新年蒙福","date":"2018-01-12T01:58:32.000Z","updated":"2018-01-13T12:33:32.406Z","comments":true,"path":"2018/01/12/新年蒙福/","link":"","permalink":"http://nwpusunyue.github.io/2018/01/12/新年蒙福/","excerpt":"","text":"写在前面 *2018年，要更多寻求神，求主耶稣带领。* 下午，我在跟几位弟兄聊天的时候，说起读圣经的果效，有一些“不太好”的反馈。弟兄的一番话让我思考，到底自己的喜乐建立在什么方面之上？更多的价值和满足是来自于人生的“成功”光鲜，还是着眼于主耶稣的信实与平安？ 在这样的社会潮流之下，我该怎样找寻自己的价值？ 经文 123【哈3:17】虽然无花果树不发旺，葡萄树不结果，橄榄树也不效力，田地不出粮食，圈中绝了羊，棚内也没有牛；【哈3:18】然而，我要因耶和华欢欣，因救我的 神喜乐。【哈3:19】主耶和华是我的力量！他使我的脚快如母鹿的蹄，又使我稳行在高处。这歌交与伶长，用丝弦的乐器。 这一段经文本意是指迦勒底人入侵犹大而使山河俱废的事件(耶利米书6:6)。先知哈巴谷知道虽然犹大要遭受患难，但他却欢欣喜乐，因为他确信，他所仰赖依靠的那一位神是信实的真神，会在百姓中施行拯救。 我现在的处境远远好于当时的百姓，所以不要看周围环境和自己的软弱，要看到神的保守，更不要抱怨。依靠耶和华的人必大得力量，抵挡罪恶，过得胜的生活，稳行在高处。 祷告 元旦的时候，自己也为新的一年蒙神祝福祈求： 诗歌：《感谢神》 事项：数算主恩，感谢赞美 诗歌：《主，我邀请你》 事项：恢复关系，全心向主 诗歌：《诗篇23篇》 事项：个人一年的敬拜生活 诗歌：《万物的结局近了》《撒母耳啊快长》 事项：教会的发展 诗歌：《青年基督徒迅速兴起》 事项：传扬福音作见证 诗歌：《耶稣爱你》 事项：家人 诗歌：《弟兄姊妹们活在神家里》 事项：弟兄姊妹的生活、侍奉 诗歌：《我不知明天的道路》《常常喜乐》 事项；清心祷告、毕业、驾照、生活 诗歌：《所以要约束你们的心》 诗歌：《一粒麦子》 诗歌：《诗篇84篇》 感恩与赞美 敬拜的时候唱的诗歌： 《这里有神的同在》 《从岁首到年终》 《我今天为你祝福》 《感谢神》 默想 自己蒙受主耶稣深厚的恩典，需要细细数算并向神感恩称谢。还要更加刚强，结出喜乐的果子。以后读研了，相比于之前生活，事情会更多更杂，学术或者活动方面的成果会更少，但我要仰望我的神。(帖前5:16-18)要常常喜乐，不住地祷告，凡事谢恩，因为这是 神在基督耶稣里向你们所定的旨意。 最后，以一首诗歌结束吧，《你的目光要转向神》(mp3下载[转载自诗歌本])","categories":[{"name":"灵修笔记","slug":"灵修笔记","permalink":"http://nwpusunyue.github.io/categories/灵修笔记/"}],"tags":[{"name":"感恩","slug":"感恩","permalink":"http://nwpusunyue.github.io/tags/感恩/"},{"name":"赞美","slug":"赞美","permalink":"http://nwpusunyue.github.io/tags/赞美/"},{"name":"祷告","slug":"祷告","permalink":"http://nwpusunyue.github.io/tags/祷告/"}]},{"title":"Python爬取携程网站问答数据","slug":"python爬取携程网站问答数据","date":"2018-01-11T13:46:01.000Z","updated":"2018-01-13T12:34:24.329Z","comments":true,"path":"2018/01/11/python爬取携程网站问答数据/","link":"","permalink":"http://nwpusunyue.github.io/2018/01/11/python爬取携程网站问答数据/","excerpt":"","text":"【Tips：点击右下角锚链图标查看文章目录。】 背景 昨天师兄让我在携程上找一家酒店，抓取该酒店的问答信息。复制粘贴的操作繁琐枯燥，想学习用python爬虫来实现。果然，方法大似气力。经过简单入门的学习，仿写代码之后，终于实现了这个功能。 观察 从携程网站上打开一个酒店的网页，如珠海香江维克酒店：（可以留心看一下当前页面的URL，后续会用到） 在右侧的侧边栏中可以找到我们所需要的【酒店问答】模块：点击查看全部问答， 发现携程的评论分类是基于标签的,并且仔细观察，这个URL中出现的一串数字和首页出现的数字是一样的。 该页面是经过初步筛选的包含该酒店的问答信息。 每页有20条评论，详细的问答页需要再次点击查看，分别为： 思路 原本想参考网上博客《python爬虫（上）–请求——关于旅游网站的酒店评论爬取（传参方法）》的方法实现对json包的分析和提取，但是正如文章所提到的，携程网站做了反爬虫处理，无法通过分析Ajax传输的方式来获得网站数据。另外，携程技术中心研发经理崔广宇在中心官微发送的推文《干货|关于反爬虫，看这一篇就够了》中，也说明了携程网站针对反爬虫做了大量的工作：①每年三月份，学生大量爬数据造成的服务器负担问题，运维人员不得不设法维护；②研发人员针对爬虫做应对处理，如查封IP，禁止访问，甚至是构造假数据！ 从网页的network中查询到ajax传输数据的URL： 打开URL，发现并没有得到想要的json数据包，o(╥﹏╥)o 所以，正所谓功夫再高，也怕菜刀。不行我就暴力一些，就按照网页浏览的顺序进行： ·1 从全部问答信息中获得包含某酒店标签的问答详情页的URL ·2 从问答的详情页抓取提问的问题及回复的答案等数据 基础知识——正则表达式 正则表达式常用的符号 123456. 匹配换行符\\n除外的任意字符* 匹配前一个字符0次或无限次? 匹配前一个字符0词或1次.* 贪心算法(尽可能长的匹配).*? 非贪心算法(匹配到就认为成功，可多次匹配)() 括号内的数据作为结果返回 正则表达式的效果展示 123findall() 匹配所有符合规律的内容，返回包含结果的列表search() 匹配并提取第一个符合规律的内容，返回一个正则表达对象(object)sub() 替换符合规律的内容，返回替换后的值 正则表达式的实用技巧 使用findall() 和 search() 从文本中匹配感兴趣的内容 实用sub实现翻页功能 先抓大后抓小 实用\\d 匹配纯数字 代码实现 从全部问答信息中获得包含某酒店标签的问答详情页的URL (1)首先，我需要查看网页源代码，知道网页中每一条问答详情的超链接指向，以便正则匹配： 可以发现很明显的规律，就是包含酒店标签的都有共同的特征：data-href=&quot;/asks/zhuhai27/…html&quot;，所以要针对此项规律匹配即可。 (2)关于翻页的问题，第1页的url是：http://you.ctrip.com/asks/z5489970.html ， 第2页的url：http://you.ctrip.com/asks/z5489970-k3/p2.html，此后第n页就是pn.html，那第1页是否可以是p1.html呢？不妨一试，果然经过试验，p1.html 就是刚才的第一页！于是，可以推断出：5489970 是该酒店的特定hotelID,包含该酒店问答信息的网址为格式为：/zHotelID-k3/p#.html 所以按照这个格式进行翻页。 (3)代码 12345678910111213141516171819202122232425262728#-*-coding:utf-8*-## 获取到每个酒店的问答页import reimport requests# 携程原始评论old_url = 'http://you.ctrip.com/asks/z371230-k3/p1.html'total_page = 4 # 暂定为4，每页20条num = 0 # 为了保存所有的评论，num 设置为 全局for i in range(1,total_page+1): # sub 实现翻页 newlink = re.sub('/p\\d.html','/p%d.html'%i,old_url,re.S) # \\d 匹配纯数字 print newlink # 请求网页 html_obj = requests.get(newlink) html = html_obj.content # 匹配到问答数据网页地址 data-href=\"/asks/zhuhai27/4597548.html\" # zhuhai27 推测是城市及城市代码，北京地区为beijing1/ links = re.findall('data-href=\"(/asks/zhuhai27/........html)\"',html,re.S) for each in links: QALink = 'http://you.ctrip.com'+each # 构造网址 # print QALink print 'now saving: ' + QALink QAhtml_obj = requests.get(QALink) # 保存问答详情页到htmls下以便后续使用 fp = open('htmls\\\\'+str(num)+'.html','wb') fp.write(QAhtml_obj.content) fp.close() num += 1 (4) 结果 将详细的问答网页保存为html,保存在本地。 从问答的详情页抓取提问的问题及回复的答案等数据 (1) 检查网页元素，可以得到提问的问题的网页标签中class=“ask_title”, 回答的标签中class=“answer_text”,于是又可以匹配成功了。 (2) 代码 123456789101112131415161718192021222324252627#-*-coding:utf-8*-## 获取到html 后进行问答的爬取import reimport requestsimport os# 打开文件夹列出所有的文件path = './htmls/' files = os.listdir(path)# 保存问答信息到QA.txtQAInfo = open('QA.txt','w')num = 1 for file in files: # 打开文件 f = open(path+file,'r') html = f.read() f.close question = re.search('&lt;i class=\"icon_asktitle\"&gt;&lt;/i&gt;(.*?)\\n',html,re.S).group(1)# 保存问题 QAInfo.write('Q' + str(num) + \":\" + question+'\\n') answers = re.findall('&lt;p class=\"answer_text\"&gt;(.*?)&lt;/p&gt;',html,re.S) i=1 # 保存答案，答案有多个 for each in answers: QAInfo.write('\\t'+'A'+str(i)+':'+each+'\\n') i += 1 num+=1# 关闭文件QAInfo.close (3) 结果 得到问答数据QA.txt: 优化与改进 (1) 可以将两部分代码合并，不用保存在本地的过程，对两个程序进行合并操作。 (2) 可以将酒店的hotelID和地区(如zhuhai27)等信息剥离出来，作为输入项，可以批量实现对某地区某酒店问答信息的爬取。 (3) 正则匹配过于简单，以至于在结果中出现如空格&quot;&amp; nbsp&quot;;手机enjoy表情&quot;&amp;#128522; &quot;甚至是超链接的信息，需要进一步对正则表达式进行优化。 解决办法是：对于空格可以用beautifulsoup 中的 strip() 方法。对于enjoy 表情，可以参看博客《移动前端手机输入法自带emoji表情字符处理》处理。对于超链接信息，可以尝试获取标签的纯文本信息，先大定位，再小定位，用get_text()获取。 感想 实验半天，写博客半天，以后需要提高自己的码字速度和markdown语法的使用。 实验过程中，一开始不要想那么多细节，先把主要问题简单化，具体化，不要被细枝末节卡住，等到完成了基本功能之后，再逐步实现更优化的细节。这样效率会提高，而且也会有一步一步实现的满足感。 可以尝试一边做实验，一遍简单写博客(博客不是论文，太详细会浪费自己的时间。) ----------------------&lt;完&gt;---------------------- 附上合并后的代码： 12345678910111213141516171819202122232425262728293031323334353637#-*-coding:utf-8*-import reimport requests# 携程原始评论# 某酒店问答网址 'http://you.ctrip.com/asks/z430205-k3/p1.html'# 格式 430205 为特定的某酒店的HotelID p1 p2 为包含该酒店评论标签的评论页，每页20条old_url = 'http://you.ctrip.com/asks/z430205-k3/p1.html'total_page = 4# 为了保存所有的评论，num 设置为 全局QAInfo = open('QA-2.txt','w+')num = 1for i in range(1,total_page+1): # sub 实现翻页 newlink = re.sub('/p\\d.html','/p%d.html'%i,old_url,re.S) print newlink # 请求网页 html_obj = requests.get(newlink) html = html_obj.content # 匹配到问答数据网页地址 data-href=\"/asks/zhuhai27/4597548.html\" # 每页20条评论 links = re.findall('data-href=\"(/asks/zhuhai27/.*?.html)\"',html,re.S) for each in links: QALink = 'http://you.ctrip.com'+each # 构造网址 print QALink QAhtml_obj = requests.get(QALink) html = QAhtml_obj.content question = re.search('&lt;i class=\"icon_asktitle\"&gt;&lt;/i&gt;(.*?)\\n',html,re.S).group(1)# 保存问题 QAInfo.write('Q' + str(num) + \":\" + question+'\\n') print question answers = re.findall('&lt;p class=\"answer_text\"&gt;(.*?)&lt;/p&gt;',html,re.S) # 保存答案，答案有多个 i=1 for each in answers: QAInfo.write('\\t'+'A'+str(i)+':'+each+'\\n') i += 1 num+=1# 关闭文件QAInfo.close","categories":[{"name":"教程应用","slug":"教程应用","permalink":"http://nwpusunyue.github.io/categories/教程应用/"}],"tags":[{"name":"python","slug":"python","permalink":"http://nwpusunyue.github.io/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"http://nwpusunyue.github.io/tags/爬虫/"}]},{"title":"Welcome","slug":"welcome","date":"2018-01-08T09:29:32.000Z","updated":"2018-01-13T12:36:26.404Z","comments":true,"path":"2018/01/08/welcome/","link":"","permalink":"http://nwpusunyue.github.io/2018/01/08/welcome/","excerpt":"","text":"【Tips：点击右下角锚链图标查看文章目录。】 介绍 欢迎大家访问我的个人博客，我将更加努力！ 本博客参考hexo官网主题pure 分类 预期分为四大类,分别记录各种学习、生活内容： 灵修笔记 读书笔记 教程应用 闲谈杂记 目的 建立自己的个人博客，也是为了勉励自己日有所长，追赶潮流和大神脚步。 Hexo 过程 建站过程参考很多网页，并且也经历:jekyll一次次失败，再到安装配置好，再放弃，选用hexo模板的过程。 之后详细补充。 个人体会 使用Hexo建站十分的方便，好用。 只要你有兴趣，可以在几个小时之内搭建你自己的喜欢的博客。 折腾了好几天，终于有所收获。虽然现在还是对其原理一知半解，但是会在以后慢慢使用中更加熟悉了解。","categories":[{"name":"闲谈杂记","slug":"闲谈杂记","permalink":"http://nwpusunyue.github.io/categories/闲谈杂记/"}],"tags":[{"name":"welcome","slug":"welcome","permalink":"http://nwpusunyue.github.io/tags/welcome/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-01-08T08:14:06.924Z","updated":"2018-01-13T12:41:07.132Z","comments":true,"path":"2018/01/08/hello-world/","link":"","permalink":"http://nwpusunyue.github.io/2018/01/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"教程应用","slug":"教程应用","permalink":"http://nwpusunyue.github.io/categories/教程应用/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://nwpusunyue.github.io/tags/hexo/"}]}]}